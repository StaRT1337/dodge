// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#ifndef PROTOBUF_INCLUDED_map_2eproto
#define PROTOBUF_INCLUDED_map_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_map_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_map_2eproto();
namespace map {
class Coin;
class CoinDefaultTypeInternal;
extern CoinDefaultTypeInternal _Coin_default_instance_;
class Cube;
class CubeDefaultTypeInternal;
extern CubeDefaultTypeInternal _Cube_default_instance_;
class Enemy;
class EnemyDefaultTypeInternal;
extern EnemyDefaultTypeInternal _Enemy_default_instance_;
class SpinningEnemy;
class SpinningEnemyDefaultTypeInternal;
extern SpinningEnemyDefaultTypeInternal _SpinningEnemy_default_instance_;
class map;
class mapDefaultTypeInternal;
extern mapDefaultTypeInternal _map_default_instance_;
class point_2f;
class point_2fDefaultTypeInternal;
extern point_2fDefaultTypeInternal _point_2f_default_instance_;
}  // namespace map
namespace google {
namespace protobuf {
template<> ::map::Coin* Arena::CreateMaybeMessage<::map::Coin>(Arena*);
template<> ::map::Cube* Arena::CreateMaybeMessage<::map::Cube>(Arena*);
template<> ::map::Enemy* Arena::CreateMaybeMessage<::map::Enemy>(Arena*);
template<> ::map::SpinningEnemy* Arena::CreateMaybeMessage<::map::SpinningEnemy>(Arena*);
template<> ::map::map* Arena::CreateMaybeMessage<::map::map>(Arena*);
template<> ::map::point_2f* Arena::CreateMaybeMessage<::map::point_2f>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace map {

enum Cube_cube_type {
  Cube_cube_type_BORDER_CUBE = 0,
  Cube_cube_type_REGULAR_CUBE = 1,
  Cube_cube_type_SPAWN_CUBE = 2,
  Cube_cube_type_END_CUBE = 3,
  Cube_cube_type_Cube_cube_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Cube_cube_type_Cube_cube_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Cube_cube_type_IsValid(int value);
const Cube_cube_type Cube_cube_type_cube_type_MIN = Cube_cube_type_BORDER_CUBE;
const Cube_cube_type Cube_cube_type_cube_type_MAX = Cube_cube_type_END_CUBE;
const int Cube_cube_type_cube_type_ARRAYSIZE = Cube_cube_type_cube_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Cube_cube_type_descriptor();
inline const ::std::string& Cube_cube_type_Name(Cube_cube_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Cube_cube_type_descriptor(), value);
}
inline bool Cube_cube_type_Parse(
    const ::std::string& name, Cube_cube_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Cube_cube_type>(
    Cube_cube_type_descriptor(), name, value);
}
// ===================================================================

class point_2f :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:map.point_2f) */ {
 public:
  point_2f();
  virtual ~point_2f();

  point_2f(const point_2f& from);

  inline point_2f& operator=(const point_2f& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  point_2f(point_2f&& from) noexcept
    : point_2f() {
    *this = ::std::move(from);
  }

  inline point_2f& operator=(point_2f&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const point_2f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const point_2f* internal_default_instance() {
    return reinterpret_cast<const point_2f*>(
               &_point_2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(point_2f* other);
  friend void swap(point_2f& a, point_2f& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline point_2f* New() const final {
    return CreateMaybeMessage<point_2f>(nullptr);
  }

  point_2f* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<point_2f>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const point_2f& from);
  void MergeFrom(const point_2f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(point_2f* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:map.point_2f)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class SpinningEnemy :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:map.SpinningEnemy) */ {
 public:
  SpinningEnemy();
  virtual ~SpinningEnemy();

  SpinningEnemy(const SpinningEnemy& from);

  inline SpinningEnemy& operator=(const SpinningEnemy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpinningEnemy(SpinningEnemy&& from) noexcept
    : SpinningEnemy() {
    *this = ::std::move(from);
  }

  inline SpinningEnemy& operator=(SpinningEnemy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SpinningEnemy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpinningEnemy* internal_default_instance() {
    return reinterpret_cast<const SpinningEnemy*>(
               &_SpinningEnemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SpinningEnemy* other);
  friend void swap(SpinningEnemy& a, SpinningEnemy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpinningEnemy* New() const final {
    return CreateMaybeMessage<SpinningEnemy>(nullptr);
  }

  SpinningEnemy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpinningEnemy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpinningEnemy& from);
  void MergeFrom(const SpinningEnemy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpinningEnemy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .map.point_2f position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::map::point_2f& position() const;
  ::map::point_2f* release_position();
  ::map::point_2f* mutable_position();
  void set_allocated_position(::map::point_2f* position);

  // int32 amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::int32 amount() const;
  void set_amount(::google::protobuf::int32 value);

  // float spacing = 3;
  void clear_spacing();
  static const int kSpacingFieldNumber = 3;
  float spacing() const;
  void set_spacing(float value);

  // float speed = 4;
  void clear_speed();
  static const int kSpeedFieldNumber = 4;
  float speed() const;
  void set_speed(float value);

  // @@protoc_insertion_point(class_scope:map.SpinningEnemy)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::map::point_2f* position_;
  ::google::protobuf::int32 amount_;
  float spacing_;
  float speed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Enemy :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:map.Enemy) */ {
 public:
  Enemy();
  virtual ~Enemy();

  Enemy(const Enemy& from);

  inline Enemy& operator=(const Enemy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Enemy(Enemy&& from) noexcept
    : Enemy() {
    *this = ::std::move(from);
  }

  inline Enemy& operator=(Enemy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Enemy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Enemy* internal_default_instance() {
    return reinterpret_cast<const Enemy*>(
               &_Enemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Enemy* other);
  friend void swap(Enemy& a, Enemy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Enemy* New() const final {
    return CreateMaybeMessage<Enemy>(nullptr);
  }

  Enemy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Enemy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Enemy& from);
  void MergeFrom(const Enemy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Enemy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .map.point_2f points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  ::map::point_2f* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField< ::map::point_2f >*
      mutable_points();
  const ::map::point_2f& points(int index) const;
  ::map::point_2f* add_points();
  const ::google::protobuf::RepeatedPtrField< ::map::point_2f >&
      points() const;

  // @@protoc_insertion_point(class_scope:map.Enemy)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::map::point_2f > points_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Coin :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:map.Coin) */ {
 public:
  Coin();
  virtual ~Coin();

  Coin(const Coin& from);

  inline Coin& operator=(const Coin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Coin(Coin&& from) noexcept
    : Coin() {
    *this = ::std::move(from);
  }

  inline Coin& operator=(Coin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Coin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coin* internal_default_instance() {
    return reinterpret_cast<const Coin*>(
               &_Coin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Coin* other);
  friend void swap(Coin& a, Coin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Coin* New() const final {
    return CreateMaybeMessage<Coin>(nullptr);
  }

  Coin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Coin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Coin& from);
  void MergeFrom(const Coin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .map.point_2f position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::map::point_2f& position() const;
  ::map::point_2f* release_position();
  ::map::point_2f* mutable_position();
  void set_allocated_position(::map::point_2f* position);

  // @@protoc_insertion_point(class_scope:map.Coin)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::map::point_2f* position_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class Cube :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:map.Cube) */ {
 public:
  Cube();
  virtual ~Cube();

  Cube(const Cube& from);

  inline Cube& operator=(const Cube& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cube(Cube&& from) noexcept
    : Cube() {
    *this = ::std::move(from);
  }

  inline Cube& operator=(Cube&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Cube& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cube* internal_default_instance() {
    return reinterpret_cast<const Cube*>(
               &_Cube_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Cube* other);
  friend void swap(Cube& a, Cube& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cube* New() const final {
    return CreateMaybeMessage<Cube>(nullptr);
  }

  Cube* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Cube>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Cube& from);
  void MergeFrom(const Cube& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cube* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Cube_cube_type cube_type;
  static const cube_type BORDER_CUBE =
    Cube_cube_type_BORDER_CUBE;
  static const cube_type REGULAR_CUBE =
    Cube_cube_type_REGULAR_CUBE;
  static const cube_type SPAWN_CUBE =
    Cube_cube_type_SPAWN_CUBE;
  static const cube_type END_CUBE =
    Cube_cube_type_END_CUBE;
  static inline bool cube_type_IsValid(int value) {
    return Cube_cube_type_IsValid(value);
  }
  static const cube_type cube_type_MIN =
    Cube_cube_type_cube_type_MIN;
  static const cube_type cube_type_MAX =
    Cube_cube_type_cube_type_MAX;
  static const int cube_type_ARRAYSIZE =
    Cube_cube_type_cube_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  cube_type_descriptor() {
    return Cube_cube_type_descriptor();
  }
  static inline const ::std::string& cube_type_Name(cube_type value) {
    return Cube_cube_type_Name(value);
  }
  static inline bool cube_type_Parse(const ::std::string& name,
      cube_type* value) {
    return Cube_cube_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .map.point_2f position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::map::point_2f& position() const;
  ::map::point_2f* release_position();
  ::map::point_2f* mutable_position();
  void set_allocated_position(::map::point_2f* position);

  // .map.Cube.cube_type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::map::Cube_cube_type type() const;
  void set_type(::map::Cube_cube_type value);

  // @@protoc_insertion_point(class_scope:map.Cube)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::map::point_2f* position_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class map :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:map.map) */ {
 public:
  map();
  virtual ~map();

  map(const map& from);

  inline map& operator=(const map& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  map(map&& from) noexcept
    : map() {
    *this = ::std::move(from);
  }

  inline map& operator=(map&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const map* internal_default_instance() {
    return reinterpret_cast<const map*>(
               &_map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(map* other);
  friend void swap(map& a, map& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline map* New() const final {
    return CreateMaybeMessage<map>(nullptr);
  }

  map* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<map>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const map& from);
  void MergeFrom(const map& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(map* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .map.Cube cubes = 1;
  int cubes_size() const;
  void clear_cubes();
  static const int kCubesFieldNumber = 1;
  ::map::Cube* mutable_cubes(int index);
  ::google::protobuf::RepeatedPtrField< ::map::Cube >*
      mutable_cubes();
  const ::map::Cube& cubes(int index) const;
  ::map::Cube* add_cubes();
  const ::google::protobuf::RepeatedPtrField< ::map::Cube >&
      cubes() const;

  // repeated .map.Coin coins = 2;
  int coins_size() const;
  void clear_coins();
  static const int kCoinsFieldNumber = 2;
  ::map::Coin* mutable_coins(int index);
  ::google::protobuf::RepeatedPtrField< ::map::Coin >*
      mutable_coins();
  const ::map::Coin& coins(int index) const;
  ::map::Coin* add_coins();
  const ::google::protobuf::RepeatedPtrField< ::map::Coin >&
      coins() const;

  // repeated .map.Enemy enemies = 3;
  int enemies_size() const;
  void clear_enemies();
  static const int kEnemiesFieldNumber = 3;
  ::map::Enemy* mutable_enemies(int index);
  ::google::protobuf::RepeatedPtrField< ::map::Enemy >*
      mutable_enemies();
  const ::map::Enemy& enemies(int index) const;
  ::map::Enemy* add_enemies();
  const ::google::protobuf::RepeatedPtrField< ::map::Enemy >&
      enemies() const;

  // repeated .map.SpinningEnemy spinning_enemies = 4;
  int spinning_enemies_size() const;
  void clear_spinning_enemies();
  static const int kSpinningEnemiesFieldNumber = 4;
  ::map::SpinningEnemy* mutable_spinning_enemies(int index);
  ::google::protobuf::RepeatedPtrField< ::map::SpinningEnemy >*
      mutable_spinning_enemies();
  const ::map::SpinningEnemy& spinning_enemies(int index) const;
  ::map::SpinningEnemy* add_spinning_enemies();
  const ::google::protobuf::RepeatedPtrField< ::map::SpinningEnemy >&
      spinning_enemies() const;

  // @@protoc_insertion_point(class_scope:map.map)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::map::Cube > cubes_;
  ::google::protobuf::RepeatedPtrField< ::map::Coin > coins_;
  ::google::protobuf::RepeatedPtrField< ::map::Enemy > enemies_;
  ::google::protobuf::RepeatedPtrField< ::map::SpinningEnemy > spinning_enemies_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// point_2f

// float x = 1;
inline void point_2f::clear_x() {
  x_ = 0;
}
inline float point_2f::x() const {
  // @@protoc_insertion_point(field_get:map.point_2f.x)
  return x_;
}
inline void point_2f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:map.point_2f.x)
}

// float y = 2;
inline void point_2f::clear_y() {
  y_ = 0;
}
inline float point_2f::y() const {
  // @@protoc_insertion_point(field_get:map.point_2f.y)
  return y_;
}
inline void point_2f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:map.point_2f.y)
}

// -------------------------------------------------------------------

// SpinningEnemy

// .map.point_2f position = 1;
inline bool SpinningEnemy::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void SpinningEnemy::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::map::point_2f& SpinningEnemy::position() const {
  const ::map::point_2f* p = position_;
  // @@protoc_insertion_point(field_get:map.SpinningEnemy.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::map::point_2f*>(
      &::map::_point_2f_default_instance_);
}
inline ::map::point_2f* SpinningEnemy::release_position() {
  // @@protoc_insertion_point(field_release:map.SpinningEnemy.position)
  
  ::map::point_2f* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::map::point_2f* SpinningEnemy::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::map::point_2f>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:map.SpinningEnemy.position)
  return position_;
}
inline void SpinningEnemy::set_allocated_position(::map::point_2f* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:map.SpinningEnemy.position)
}

// int32 amount = 2;
inline void SpinningEnemy::clear_amount() {
  amount_ = 0;
}
inline ::google::protobuf::int32 SpinningEnemy::amount() const {
  // @@protoc_insertion_point(field_get:map.SpinningEnemy.amount)
  return amount_;
}
inline void SpinningEnemy::set_amount(::google::protobuf::int32 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:map.SpinningEnemy.amount)
}

// float spacing = 3;
inline void SpinningEnemy::clear_spacing() {
  spacing_ = 0;
}
inline float SpinningEnemy::spacing() const {
  // @@protoc_insertion_point(field_get:map.SpinningEnemy.spacing)
  return spacing_;
}
inline void SpinningEnemy::set_spacing(float value) {
  
  spacing_ = value;
  // @@protoc_insertion_point(field_set:map.SpinningEnemy.spacing)
}

// float speed = 4;
inline void SpinningEnemy::clear_speed() {
  speed_ = 0;
}
inline float SpinningEnemy::speed() const {
  // @@protoc_insertion_point(field_get:map.SpinningEnemy.speed)
  return speed_;
}
inline void SpinningEnemy::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:map.SpinningEnemy.speed)
}

// -------------------------------------------------------------------

// Enemy

// repeated .map.point_2f points = 1;
inline int Enemy::points_size() const {
  return points_.size();
}
inline void Enemy::clear_points() {
  points_.Clear();
}
inline ::map::point_2f* Enemy::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:map.Enemy.points)
  return points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::map::point_2f >*
Enemy::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:map.Enemy.points)
  return &points_;
}
inline const ::map::point_2f& Enemy::points(int index) const {
  // @@protoc_insertion_point(field_get:map.Enemy.points)
  return points_.Get(index);
}
inline ::map::point_2f* Enemy::add_points() {
  // @@protoc_insertion_point(field_add:map.Enemy.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::map::point_2f >&
Enemy::points() const {
  // @@protoc_insertion_point(field_list:map.Enemy.points)
  return points_;
}

// -------------------------------------------------------------------

// Coin

// .map.point_2f position = 1;
inline bool Coin::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void Coin::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::map::point_2f& Coin::position() const {
  const ::map::point_2f* p = position_;
  // @@protoc_insertion_point(field_get:map.Coin.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::map::point_2f*>(
      &::map::_point_2f_default_instance_);
}
inline ::map::point_2f* Coin::release_position() {
  // @@protoc_insertion_point(field_release:map.Coin.position)
  
  ::map::point_2f* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::map::point_2f* Coin::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::map::point_2f>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:map.Coin.position)
  return position_;
}
inline void Coin::set_allocated_position(::map::point_2f* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:map.Coin.position)
}

// -------------------------------------------------------------------

// Cube

// .map.Cube.cube_type type = 1;
inline void Cube::clear_type() {
  type_ = 0;
}
inline ::map::Cube_cube_type Cube::type() const {
  // @@protoc_insertion_point(field_get:map.Cube.type)
  return static_cast< ::map::Cube_cube_type >(type_);
}
inline void Cube::set_type(::map::Cube_cube_type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:map.Cube.type)
}

// .map.point_2f position = 2;
inline bool Cube::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void Cube::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::map::point_2f& Cube::position() const {
  const ::map::point_2f* p = position_;
  // @@protoc_insertion_point(field_get:map.Cube.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::map::point_2f*>(
      &::map::_point_2f_default_instance_);
}
inline ::map::point_2f* Cube::release_position() {
  // @@protoc_insertion_point(field_release:map.Cube.position)
  
  ::map::point_2f* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::map::point_2f* Cube::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::map::point_2f>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:map.Cube.position)
  return position_;
}
inline void Cube::set_allocated_position(::map::point_2f* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:map.Cube.position)
}

// -------------------------------------------------------------------

// map

// repeated .map.Cube cubes = 1;
inline int map::cubes_size() const {
  return cubes_.size();
}
inline void map::clear_cubes() {
  cubes_.Clear();
}
inline ::map::Cube* map::mutable_cubes(int index) {
  // @@protoc_insertion_point(field_mutable:map.map.cubes)
  return cubes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::map::Cube >*
map::mutable_cubes() {
  // @@protoc_insertion_point(field_mutable_list:map.map.cubes)
  return &cubes_;
}
inline const ::map::Cube& map::cubes(int index) const {
  // @@protoc_insertion_point(field_get:map.map.cubes)
  return cubes_.Get(index);
}
inline ::map::Cube* map::add_cubes() {
  // @@protoc_insertion_point(field_add:map.map.cubes)
  return cubes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::map::Cube >&
map::cubes() const {
  // @@protoc_insertion_point(field_list:map.map.cubes)
  return cubes_;
}

// repeated .map.Coin coins = 2;
inline int map::coins_size() const {
  return coins_.size();
}
inline void map::clear_coins() {
  coins_.Clear();
}
inline ::map::Coin* map::mutable_coins(int index) {
  // @@protoc_insertion_point(field_mutable:map.map.coins)
  return coins_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::map::Coin >*
map::mutable_coins() {
  // @@protoc_insertion_point(field_mutable_list:map.map.coins)
  return &coins_;
}
inline const ::map::Coin& map::coins(int index) const {
  // @@protoc_insertion_point(field_get:map.map.coins)
  return coins_.Get(index);
}
inline ::map::Coin* map::add_coins() {
  // @@protoc_insertion_point(field_add:map.map.coins)
  return coins_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::map::Coin >&
map::coins() const {
  // @@protoc_insertion_point(field_list:map.map.coins)
  return coins_;
}

// repeated .map.Enemy enemies = 3;
inline int map::enemies_size() const {
  return enemies_.size();
}
inline void map::clear_enemies() {
  enemies_.Clear();
}
inline ::map::Enemy* map::mutable_enemies(int index) {
  // @@protoc_insertion_point(field_mutable:map.map.enemies)
  return enemies_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::map::Enemy >*
map::mutable_enemies() {
  // @@protoc_insertion_point(field_mutable_list:map.map.enemies)
  return &enemies_;
}
inline const ::map::Enemy& map::enemies(int index) const {
  // @@protoc_insertion_point(field_get:map.map.enemies)
  return enemies_.Get(index);
}
inline ::map::Enemy* map::add_enemies() {
  // @@protoc_insertion_point(field_add:map.map.enemies)
  return enemies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::map::Enemy >&
map::enemies() const {
  // @@protoc_insertion_point(field_list:map.map.enemies)
  return enemies_;
}

// repeated .map.SpinningEnemy spinning_enemies = 4;
inline int map::spinning_enemies_size() const {
  return spinning_enemies_.size();
}
inline void map::clear_spinning_enemies() {
  spinning_enemies_.Clear();
}
inline ::map::SpinningEnemy* map::mutable_spinning_enemies(int index) {
  // @@protoc_insertion_point(field_mutable:map.map.spinning_enemies)
  return spinning_enemies_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::map::SpinningEnemy >*
map::mutable_spinning_enemies() {
  // @@protoc_insertion_point(field_mutable_list:map.map.spinning_enemies)
  return &spinning_enemies_;
}
inline const ::map::SpinningEnemy& map::spinning_enemies(int index) const {
  // @@protoc_insertion_point(field_get:map.map.spinning_enemies)
  return spinning_enemies_.Get(index);
}
inline ::map::SpinningEnemy* map::add_spinning_enemies() {
  // @@protoc_insertion_point(field_add:map.map.spinning_enemies)
  return spinning_enemies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::map::SpinningEnemy >&
map::spinning_enemies() const {
  // @@protoc_insertion_point(field_list:map.map.spinning_enemies)
  return spinning_enemies_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace map

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::map::Cube_cube_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::map::Cube_cube_type>() {
  return ::map::Cube_cube_type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_map_2eproto
